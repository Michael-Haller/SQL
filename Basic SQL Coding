/* Beginner Code
/* https://sql-format.com/ is good for formatting

    /* Select everything from our order database
    SELECT * FROM orders;

    /*Creating MySQL Database Server for our Dog Store App
    Create Database dog_store_db;

    /* Creating Database
    CREATE DATABASE dog_store_db;

    /* Show your database
    show databases;

    /*Drop a database
    DROP DATABASE dog_store_db;

    /* Ways to use Databases
    USE dog_store_db;
    SELECT database();

/* Creating or Deleting Tables
  /* Create a table called Dog Shop and have dog name and age
  /* Make sure to create a database first
     CREATE DATABASE dog_store 
     CREATE TABLE dog_shop
     (
          dog_name VARCHAR(10),
          dog_age INT,
     );     
     
     /* Want to see if this worked?
    SHOW TABLES;
    SHOW COLUMNS FROM dog_shop;
     /* OR
     DESC dog_shop;
  
    /* How about deleting
     DROP TABLE dog_shop
     
  /* Adding Data to the Table
    INSERT INTO dog_shop (name, age) VALUES ('Mike', 9), ('Marley', 1);
    
    /* Confirming this worked
    Select * FROM dog_shop
    
    /* Null versus Not Null. Null does not equal zero.
    CREATE TABLE dog_shop2 (
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL);
    
    /*Creating a default value
    CREATE TABLE dog_shop3
    (name VARCHAR(100) DEFAULT 'no name provided',
    age INT DEFAULT 99);
    
    /* Other Option
    CREATE TABLE dog_shop4
    (name VARCHAR(100) NOT NULL DEFAULT 'no name provided',
    age INT NOT NULL DEFAULT 99);
    
    /* Primary keys how to differentiate when there are two of the same names and ages in a group
    CREATE TABLE unique_dogs
    (dog_id INT NOT NULL,
    name VARCHAR(100),
    age INT,
    PRIMARY KEY (dog_id));
    
    /* When making it auto increment
     CREATE TABLE unique_dogs2
  (dog_id INT NOT NULL AUTO_INCRMENT,
    name VARCHAR(100),
    age INT,
    PRIMARY KEY (dog_id));
   
     /* Changes items in a table
    SELECT * FROM dog_shop Where name = "Mike";
    Update dog-shop SET name = 'Michael' WHERE name = 'Mike';
    


/* Creating A table of shirts in your closest. 
/* Do the following: 
    shirts must need different id's, 
    insert a purple shirt, 
    grab medium Polo shirts and change to large, 
    grab the tank top shirt and chnage last day worn to zero,
    change white shrits to off-white and small to xs
    delete shirts worn 200 days ago
    delete all tank tops
    delete all shirts
    delete the entire shirts table
    

        SELECT database();
 
        CREATE DATABASE shirts_db;
 
        use shirts_db;
 
        SELECT database();
 
        CREATE TABLE shirts
         (
             shirt_id INT NOT NULL AUTO_INCREMENT,
             article VARCHAR(100),
             color VARCHAR(100),
            shirt_size VARCHAR(100),
            last_worn INT,
             PRIMARY KEY(shirt_id)
         );
 
        DESC shirts;
 
        INSERT INTO shirts(article, color, shirt_size, last_worn) VALUES
        ('t-shirt', 'white', 'S', 10),
        ('t-shirt', 'green', 'S', 200),
        ('polo shirt', 'black', 'M', 10),
        ('tank top', 'blue', 'S', 50),
        ('t-shirt', 'pink', 'S', 0),
        ('polo shirt', 'red', 'M', 5),
        ('tank top', 'white', 'S', 200),
        ('tank top', 'blue', 'M', 15);
 
        SELECT * FROM shirts;
     
        INSERT INTO shirts(color, article, shirt_size, last_worn) 
        VALUES('purple', 'polo shirt', 'medium', 50);
 
        SELECT * FROM shirts;

        SELECT article, color FROM shirts;
 
        SELECT * FROM shirts WHERE shirt_size='M';
 
        SELECT article, color, shirt_size, last_worn FROM shirts WHERE shirt_size='M';
        SELECT * FROM shirts WHERE article='polo shirt';
 
        UPDATE shirts SET shirt_size='L' WHERE article='polo shirt';
 
        SELECT * FROM shirts WHERE article='polo shirt';
 
        SELECT * FROM shirts;
 
        SELECT * FROM shirts WHERE last_worn=15;
 
        UPDATE shirts SET last_worn=0 WHERE last_worn=15;
 
        SELECT * FROM shirts WHERE last_worn=15;
 
        SELECT * FROM shirts WHERE last_worn=0;
 
        SELECT * FROM shirts WHERE color='white';
 
        UPDATE shirts SET color='off white', shirt_size='XS' WHERE color='white';
 
        SELECT * FROM shirts WHERE color='white';
 
        SELECT * FROM shirts WHERE color='off white';
 
        SELECT * FROM shirts;
        SELECT * FROM shirts;
 
        SELECT * FROM shirts WHERE last_worn=200;
 
        DELETE FROM shirts WHERE last_worn=200;
 
        SELECT * FROM shirts WHERE article='tank top';
 
        DELETE FROM shirts WHERE article='tank top';
 
        SELECT * FROM shirts WHERE article='tank top';
 
        SELECT * FROM shirts;
 
        DELETE FROM shirts;
 
        SELECT * FROM shirts;
 
        DROP TABLE shirts;
 
        show tables;
 
        DESC shirts;
        
        
        source dog_file.sql
        
        /* How to combine two columns and add text in between
        CONCAT(column, 'text', anotherColumn, 'more text')
        
        /* Examples of extrating parts of text from a statement and/or columns
        /* The 'AS' part is where you name the text
        SELECT SUBSTRING('Hello World', 1, 4);
        SELECT SUBSTRING('Hello World', 7);
        SELECT SUBSTRING('Hello World', 3, 8);
        SELECT SUBSTRING('Hello World', 3);
        SELECT SUBSTRING('Hello World', -3);
        SELECT SUBSTRING('Hello World', -7);
        SELECT title FROM books;
        SELECT SUBSTRING("Where I'm Calling From: Selected Stories", 1, 10);
        SELECT SUBSTRING(title, 1, 10) FROM books;
        SELECT SUBSTRING(title, 1, 10) AS 'short title' FROM books;
        SELECT SUBSTR(title, 1, 10) AS 'short title' FROM books;
        SELECT CONCAT
         (
          SUBSTRING(title, 1, 10),
          '...'
            )
        FROM books;
        
        /* Examples of REPLACE
        SELECT REPLACE('Hello World', 'Hell', '%$#@');
        SELECT REPLACE('Hello World', 'l', '7');
        SELECT REPLACE('Hello World', 'o', '0');
        SELECT REPLACE('HellO World', 'o', '*');
        SELECT REPLACE('cheese bread coffee milk', ' ', ' and ');
 
        SELECT REPLACE(title, 'e ', '3') FROM books;
 
        -- SELECT
        --    CONCAT
        --    (
        --        SUBSTRING(title, 1, 10),
        --        '...'
        --    ) AS 'short title'
        -- FROM books;
 
        SELECT
           SUBSTRING(REPLACE(title, 'e', '3'), 1, 10)
        FROM books;
 
        SELECT
           SUBSTRING(REPLACE(title, 'e', '3'), 1, 10) AS 'weird string'
        FROM books;
        
        /* Examples of Reversing the text
        SELECT REVERSE('Hello World');
        SELECT REVERSE('meow meow');
        SELECT REVERSE(author_fname) FROM books;
        SELECT CONCAT('woof', REVERSE('woof'));
        SELECT CONCAT(author_fname, REVERSE(author_fname)) FROM books;
        
        /* Examples of CHAR_LENGTH which is finding the length of a statement based on the amount of characters
        SELECT CHAR_LENGTH('Hello World');
        SELECT author_lname, CHAR_LENGTH(author_lname) AS 'length' FROM books;
        SELECT CONCAT(author_lname, ' is ', CHAR_LENGTH(author_lname), ' characters long') FROM books;
        
        /* DISTINCT is revealing UNIQUE VALUES and get rid of the duplicates
        SELECT DISTINCT author_lname FROM books;
        
        /* ORDER BY helps sort items and orders them by whatever selection you choose
        SELECT title, released_year, pages FROM books ORDER BY released_year

        /* LIMIT - Purpose is to show only a select amount from a list, table, etc.
        SELECT title, released_year FROM books ORDER BY released_year DESC LIMIT 0,5;

        /* LIKE - "Not sure what you need, but know what it should be similar too"
            /* the wilcard symbol is "%" which putting it infront of the letters indicates it can end with your search option and vice versa if it's on the back end
            /* Doing LIKE '____' means it's looking for the digit amount that you have underline in the text
            /* Doing the escape key "\" helps you find items with a"%" or a "_" in your searches
            SELECT title, author_fname FROM books WHERE author_fname LIKE '%da%'
            SELECT title, author_fname FROM books WHERE author_fname LIKE 'da%'
            
            SELECT title FROM books WHERE title LIKE '%\%%'
            SELECT title FROM books WHERE title LIKE '%\_%'
        
        
    /*  COUNT - This can help tell you how many items are in a dataset
    SELECT COUNT(DISTINCT author_lname, author_fname) FROM books
    
    /* MIN MAX - returns smallest and largest of any set
    SELECT title, pages FROM books 
    WHERE pages = (SELECT Min(pages) FROM books); 
    
    /* AVG - Returns the average
    SELECT author_fname, author_lname, AVG(pages) FROM book GROUP BY author_lname, author_fname;
    
    /* CHAR Vs VARCHAR - Char shows the amount you enter but same storage size no matter what
    
    /* DECIMAL (#,#) =(Total Number of Digits, Digits after decimal)
    /* FLOAT and DOUBLE store larger numbers using less space, but comes at the cost of percision
    
    /* DATE = 'YYYY-MM-DD', TIME = 'HH:MM:SS', DATETIME = 'YYYY-MM-DD HH:MM:SS'
    /* DAYNAME - Returns the day of the week a specific date occured
    /* MONTHNAME - same as DAYNAME but Month
    /* TIMESTAMPS - keep less space versus DATETIME but only go from 1970 to 2038
    
   
   
   /* LOGICAL OPERATORS
   
   /* NOT EQUAL = "!="
   SELECT title FROM books WHERE released_year != 2017;
   
   /* NOT LIKE
   SELECT title FROM books WHERE title NOT LIKE 'W%';
   
   /* Greater Than & Less Than Also equal to with each
   SELECT title, released_year FROM books 
   WHERE released_year > 2000 ORDER BY released_year;
 
   SELECT title, released_year FROM books 
   WHERE released_year >= 2000 ORDER BY released_year;
   
   SELECT title, released_year FROM books
   WHERE released_year < 2000;
 
   SELECT title, released_year FROM books
   WHERE released_year <= 2000;
   
   /* AND, OR Operators
   
    SELECT * FROM books
    WHERE author_lname='Eggers' 
    AND released_year > 2010 
    AND title LIKE '%novel%';
    
    SELECT title, author_lname, released_year, stock_quantity 
    FROM   books WHERE  author_lname = 'Eggers' OR released_year > 2010  OR     stock_quantity > 100;
    
    /* BETWEEN and NOT BETWEEN
    SELECT title, released_year FROM books 
    WHERE released_year BETWEEN 2004 AND 2015;
 
    SELECT title, released_year FROM books 
    WHERE released_year NOT BETWEEN 2004 AND 2015;
    
    /* IN and NOT IN
    /* MODULO = '%' showing what the remainder is
    
    SELECT title, released_year FROM books
    WHERE released_year IN (2017, 1985);
    
    SELECT title, released_year FROM books
    WHERE released_year NOT IN 
    (2000,2002,2004,2006,2008,2010,2012,2014,2016);
    
    SELECT title, released_year FROM books
    WHERE released_year >= 2000 AND
    released_year % 2 != 0;
    
    /* CASE Statements
    SELECT title, stock_quantity,
    CASE 
        WHEN stock_quantity <= 50 THEN '*'
        WHEN stock_quantity <= 100 THEN '**'
        ELSE '***'
    END AS STOCK
    FROM books;
    
    /* FOREIGN KEY (fk) - A way to access the primary key of another table and can link two data tables together
    -- Creating the customers and orders tables
    /* Note the last part of this code would fail due to fact there is no ID 98
    
    CREATE TABLE customers(
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100)
    );
    
    CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) REFERENCES customers(id)
    );

    INSERT INTO customers (first_name, last_name, email) 
    VALUES ('Boy', 'George', 'george@gmail.com'),
       ('George', 'Michael', 'gm@gmail.com'),
       ('David', 'Bowie', 'david@gmail.com'),
       ('Blue', 'Steele', 'blue@gmail.com'),
       ('Bette', 'Davis', 'bette@aol.com');
       
    INSERT INTO orders (order_date, amount, customer_id)
    VALUES ('2016/02/10', 99.99, 1),
       ('2017/11/11', 35.50, 1),
       ('2014/12/12', 800.67, 2),
       ('2015/01/03', 12.50, 2),
       ('1999/04/11', 450.25, 5);
       
    INSERT INTO orders (order_date, amount, customer_id)
    VALUES ('2016/06/06', 33.67, 98);
    
    /* Cross Joining *\
    
    /* Inner Joining *\
    
    SELECT * FROM customers
    JOIN orders
    ON customers.id = orders.customer_id;
    
    /* Left Joining *\
    
    SELECT * FROM customers
    LEFT JOIN orders
    ON customers.id = orders.customer_id;
    
    SELECT first_name, last_name, order_date, amount
    FROM customers
    LEFT JOIN orders
    ON customers.id = orders.customer_id; 
    
    SELECT 
    first_name, 
    last_name,
    IFNULL(SUM(amount), 0) AS total_spent
    FROM customers
    LEFT JOIN orders
    ON customers.id = orders.customer_id
    GROUP BY customers.id
    ORDER BY total_spent;
    
    /* Right Joining *\
    SELECT * FROM customers
    RIGHT JOIN orders
    ON customers.id = orders.customer_id;
    
                                            /* Example of joining tables based on reviews and series *\
                                            SELECT
                                            title,
                                            AVG(rating) as avg_rating
                                            FROM series
                                            JOIN reviews
                                            ON series.id = reviews.series_id
                                            GROUP BY series.id
                                            ORDER BY avg_rating;
                                            
                                            SELECT
                                            first_name,
                                            last_name,
                                            rating
                                            FROM reviews
                                            INNER JOIN reviewers
                                            ON reviewers.id = reviews.reviewer_id; 
                                            
                                            SELECT 
                                            title,
                                            rating,
                                            CONCAT(first_name,' ', last_name) AS reviewer
                                            FROM reviewers
                                            INNER JOIN reviews 
                                            ON reviewers.id = reviews.reviewer_id
                                            INNER JOIN series
                                            ON series.id = reviews.series_id
                                            ORDER BY title;
                                            
                                          
    
