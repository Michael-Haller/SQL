--Advance SQL

-- 1) adjusting max packet size to allow large files to run

SET GLOBAL max_allowed_packet = 1073741824;


-- 2) adjusting your SQL mode to allow invalid dates and use a smarter GROUP BY setting

SET GLOBAL SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES,ONLY_FULL_GROUP_BY';


-- 3) adjusting your timeout settings to run longer queries

SET GLOBAL connect_timeout=28800;

SET GLOBAL wait_timeout=28800;

SET GLOBAL interactive_timeout=28800;

-- The database doesn't load here because it's too massive for github

-- Task 1: Prodcue a breakdown by UTM Source, campaign, and referring domain


-For the Schema in the example

Use mavenfuzzyfactory;

Select 
  utm_source,
  utm_campaign,
  http_referer
  
COUNT(DISTINCT website_session_id) AS number_of_sessions
FROM website_sessions
WHERE created_at < '2012-04-14

GROUP BY
  utm_source,
  utm_campaign
  http_referer
  
ORDER BY number_of_sessions DESC;

--Task 2: Calculate the Conversion Rate from session to order
-- CVR must be at least 4%

Select 

COUNT(DISTINCT. website_sessions.website_session_id) AS sessions, 
COUNT(DISTINCT. orders.order_id) AS orders,
COUNT(DISTINCT. orders.order_id)/ COUNT(DISTINCT. website_sessions.website_session_id) AS sessions_to_order_conv_rt

From website_sessions
  LEFT JOIN orders
    ON orders.wes_session_id = website_sessions.website_session_id

Where website_sessions.creatred_at < '2012-04-14
  AND utm_source = 'gsearch'
  AND utm_campaign = 'nonbrand';
  
  
  --Task 3: We bid down gsearch nonbrand. Pull gsearch nonbrand trended session vlume, by week
  
  Select
  
  MIN(DATE(created_at)) AS week_start_at, 
  COUNT(DISTINCT website_session_id) AS sessions
  
  From website_sessions 
  
   WHERE created_at < '2012-04-15'
    AND utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand'
    
   GROUP BY   
   YEAR(created_at)
   WEEK(created_at);
   
   -- Task 4: pull conversion rates from session to order, by devide type
   
   Select
      website_sessions.device_type,
      COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
      COUNT(DISTINCT orders.order_id) AS orders,
      COUNT(DISTINCT orders.order_id)/ COUNT(DISTINCT website_sessions.website_session_id) AS conv_rt
      
     From website_sessions 
      LEFT JOIN orders
        ON orders.website_session_id = website_sessions.website_session_id
  
   WHERE website_sessions.created_at < '2012-05-12'
    AND utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand'
  
  GROUP BY 1;
  
  -- Task 5: Pull Weekly trends for both desktop and mobile
  
  Select 
  
  YEAR(created_at) AS yr,
  WEEK(created_at) AS wk,
  MIN(DATE(created_at)) AS week_start_date,
  COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN website_session_id ELSE NULL END) AS desktop_sessions,
  COUNT(DISTINCT CASE WHEN device_type = 'mobile' THEN website_session_id ELSE NULL END) AS mobile_sessions
  
  FROM website_sessions
    
  WHERE website_sessions.created_at < '2012-06-09'
      AND website_sessions.created_at > '2012-04-15'
      AND utm_source = 'gsearch'
      AND utm_campaign = 'nonbrand'
 
 GROUP BY
    YEAR(created_at),
    WEEK(created_at);
    
-- SECTION TWO
-- Creating Temporary tables - create a dataset which you can query off of
-- CREATE TEMPORARY TABLE newtemptablename

--Task 1: Pull the most-viewed website pages, ranked by session volume

Select 
  pageview_url,
  COUNT(DISTINCT website_pageview_id) AS pvs
 
FROM website_pageviews

WHERE created_at < '2012-06-09'

GROUP BY 
  pageview_url
ORDER BY
  pvs DESC;
  
  -- Task 2: Pull a list of top entry pages by pulling all entry pages and rank them on entry volume
  
  
  CREATE TEMPORARY TABLE first_pv_per_session
  Select
    website_session_id,
    MIN(website_pageview_id) AS first_pv
  
  FROM website_pageviews
  
  WHERE created_at < '2012-06-12'

  GROUP BY website_session_id;

Select 
  website_pageviews.pageview_url,
  COUNT(DISTINCT first_pv_per_session.website_session_id) as sessions_hitting_page
  
FROM first_pv_per_session
  LEFT JOIN website_pageviews
    ON first_pv_per_session.first_pv = website_pageviews.website_pageview_id
    
GROUP BY wesbite_pageviews.pageview_url

--Task 3: show three numbers, sessions, bounced sessions, and % of sessions which bounced

CRETE TEMPORARY TABLE first_pageviews
Select 
  website_session_id
  MIN(website_pageview_id) AS min_pageview_id

FROM website_pageviews

WHERE created_at < '2012-06-14'
GROUP BY
  website_session_id;
  
-- bring in landing page, but restirct to home only

  CREATE TEMPORARY TABLE sessions_w_home_landing_page
  Select
    first_pageviews.website_session_id,
    website_pageviews.pageview_url AS landing_page
  FROM first_pageviews
    LEFT JOIN website_pageviews
      ON website_pageviews.website_pageview_id = first_pageviews.min_pageview_id
 WHERE website_pageviews.pageview_url = '/home';
 
 -- Now table with count of pageviews per session
 
  CREATE TEMPORARY TABLE bounced_sessions
  
  SELECT
    sessions_w_home_landing_page.website_session_id,
    sessions_w_home_landing_page.landing_page,
    COUNT(website_pageviews.website_pageview_id) AS count_of_pages_viewed
    
    FROM sessions_w_home_landing_page
    LEFT JOIN website_pageviews
      ON website_pageviews.website_session_id = sessions_w_home_landing_page.website_session_id
      
      GROUP BY 
        sessions_w_home_landing_page.website_session_id,
        sessions_w_home_landing_page.landing_page
        
       HAVING
       COUNT(website_pageviews.website_pageview_id) = 1;
       
 -- Calculate Bounce Rates
 Select
  COUNT(DISTINCT sessions_w_home_landing_page.website_session_id) AS total_sessions,
  COUNT(DISTINCT bounced.website_session_id) AS bounced_sessions,
  COUNT(DISTINCT bounced.website_session_id)/ COUNT(DISTINCT sessions_w_home_landing_page.website_session_id) AS bounce_rate
  
 From sessions_w_home_landing_page
  LEFT JOIN bounced_sessions
    ON sessions_w_home_landing_page.website_session_id = bounced_sessions.website_sessions_id
    
    ORDER BY
    sessions_w_home_landing_page.website_session_id
    
--TASK 3: They created a new custom landing page (/lander-1) in a 50/50 test against the homepage (/home). Pull Bounce rates for the two groups. Just look at the period when lander-1 was getting traffic

  --Find first Website_pageview_id for relevant sessions
  Select 

  MIN(created_at) AS first_created_at,
  MIN(website_pageview_id) AS first_pageview_id

  FROM website_pageviews

  WHERE pageview_url ='/lander-1'
    AND created_at IS NOT NULL;
    
 -- identify landing page of each session
 
   CREATE TEMPORARY TABLE first_test_pageviews
     Select
      website_pageviews.website_session_id,
      MIN(website_pageviews.website_pageview_id) AS min_pageview_id
    
    FROM website_pageviews
      INNER JOIN wesbite_sessions
       ON wesbite_sessions.website_session_id = website_pageviews.website_session_id
       AND website_sessions.created _at < '2012-07-28'
       AND website_pageviews.website_pageview_id > 23504 -- What you find in part 1
       AND utm_source = 'gsearch'
       AND utm_campaign = 'nonbrand'
     
      GROUP BY
        website_pageviews.website_session_id;
      
     -- Bring in the landing page to each session, but restrict to home or lander-1
   
       CREATE TEMPORARY TABLE nonbrand_test_sessions_w_landing_page
        Select
         first_test_pageviews.website_session_id
          website_pageviews.pageview_url AS landing_page
        FROM first_test_pageviews
         LEFT JOIN website_pageviews
           ON website_pageviews.website_pageview_id = first_test_pageviews.min_pageview_id
          
          WHERE website_pageviews.pageview_url IN ('/home', '/lander-1);
         
   
   --now a table to count pageview per session and limit to bounced_session
  
     CREATE TEMPORARY TABLE nonbrand_test_bounced_sessions
        Select
          nonbrand_test_sessions_w_landing_page.website_session_id,
          nonbrand_test_sessions_w_landing_page.landing_page,
           COUNT(website_pageviews.website_pageview_id) AS count_of_pages_viewed
      
         FROM nonbrand_test_sessions_w_landing_page
           LEFT JOIN website_pageviews
                ON  website_pageviews.website_session_id = nonbrand_test_sessions_w_landing_page.website_session_id
        
           GROUP BY 
            nonbrand_test_sessions_w_landing_page.website_session_id,
            nonbrand_test_sessions_w_landing_page.landing_page
       
           HAVING
             COUNT(website_pageviews.website_pageview_id) = 1;
        
     -- Do the first to show and count after
     
        Select
         nonbrand_test_sessions_w_landing_page.landing_page,
       COUNT(DISTINCT nonbrand_test_sessions_w_landing_page.website_session_id) AS sessions,
       COUNT(DISTINCT nonbrand_test_bounced_sessions.website_session_id) AS bounced_sessions,   
       COUNT(DISTINCT nonbrand_test_bounced_sessions.website_session_id)/ COUNT(DISTINCT nonbrand_test_sessions_w_landing_page.website_session_id) AS bounce_rates
       
        FROM nonbrand_test_sessions_w_landing_page
           LEFT JOIN nonbrand_test_bounced_sessions
             ON  nonbrand_test_sessions_w_landing_page.website_session_id = nonbrand_test_bounced_sessions.website_session_id
          
       GROUP BY
         nonbrand_test_bounced_sessions.website_session_id;


--Task 4: Pull Volume of paid search nonbrand traffic landing on /home and /lander-1, trended weekly since June 1st. Also pull overall paid search bounce rate trened weekly

CREATE TEMPORARY TABLE sessions_w_min_pv_id_and_view_count

Select 
  website_sessions.website_session_id,
  MIN(website_pageviews.website_pageview_id) AS first_pageview_id,
  COUNT(website_pageviews.website_pageview_id) AS count_pageviews
  
  FROM website_sessions
    LEFT JOIN website_pageviews
      ON  website_sessions.website_session_id = website_pageviewswebsite_session_id
      
  WHERE website_sessions.created_at > '2012-06-01' 
    AND website_sessions.created_at < '2012-08-31'
    AND website_sessions.utm_source = 'gsearch'
    AND website_sessions.utm_campaign = 'nonbrand'
    
  GROUP BY
    website_sessions.website_session_id
        
CREATE TEMPORARY TABLE sessions_w_counts_lander_and_created_at

  Select
    sessions_w_min_pv_id_and_view_count.website_session_id,
    sessions_w_min_pv_id_and_view_count.first_pageview_id,
    sessions_w_min_pv_id_and_view_count.count_pageviews,
    website_pageviews.pageview_url AS landing_page,
    wesbite_pageviews.created_at AS session_created_at
  
  FROM
    LEFT JOIN website_pageviews
      ON sessions_w_min_pv_id_and_view_count.first_pageview_id = website_pageviews.website_pageview_id;
      
    Select 
      YEARWEEK(session_creatd_at) AS year_week,
     MIN(DATE(session_created_at)) AS week_start_date,
      COUNT(DISTINCT website_session_id) AS total_sessions,
     COUNT(DISTINCT CASE WHEN count_pageviews = 1 THEN website_session_id ELSE NULL END) AS bounced_sessions,
     COUNT(DISTINCT CASE WHEN count_pageviews = 1 THEN website_session_id ELSE NULL END)*1.0/COUNT(DISTINCT website_session_id),
     COUNT(DISTINCT CASE WHEN count_pageviews = '/home' THEN website_session_id ELSE NULL END) AS home_sessions,
      COUNT(DISTINCT CASE WHEN count_pageviews = '/lander-1' THEN website_session_id ELSE NULL END) AS lander_sessions,

    FROM sessions_w_counts_lander_and_created_at

    GROUP BY
    YEARWEEK(session_created_at);

--Subqueries - similar to temporary tables; can be quicker to write for simple tasks, but can be very hard to follow for longer multi-step analyses

-- TASK 5: Build a full conversion funnel that analyzses how many customers in each step. Start with /lander-1 and and go to the thank you page. Use data since August 15th

Select 
    website_sessions.website_session_id,
    website_pageviews.pageview_url,
    website_pageviews.created_at AS pageviews_created_at
  CASE WHEN pageview_url = '/products' THEN 1 ELSE 0 END AS products_page,
  CASE WHEN pageview_url = '/the-original-mr-fuzzy' THEN 1 ELSE 0 END AS mrfuzzy_page,
  CASE WHEN pageview_url = '/cart' THEN 1 ELSE 0 END AS cart_page,
  CASE WHEN pageview_url = '/shipping' THEN 1 ELSE 0 END AS pshipping_page,
  CASE WHEN pageview_url = '/billing' THEN 1 ELSE 0 END AS billing_page,
  CASE WHEN pageview_url = '/thank-you-for-your-order' THEN 1 ELSE 0 END AS thankyou_page,


FROM website_sessions
  LEFT JOIN website_pageviews
    ON website_sessions.website_session_id = website_pageviews.website_session_id
  
  WHERE website_sessions.utm_source = 'gsearch'
    AND website_sessions.utm_campaign = 'nonbrand' 
    AND website_sessions.created_at > '2012-08-05'
    AND website_sessions.created_at < '2012-09-05'
    
  ORDER BY
    website_sessions.website_session_id,
    website_pageviews.created_at;
    
 
 -- Subquery it
 
 SELECT
 website_session_id,
 MAX(products_page) As product_made_it,
 MAX(mrfuzzy_page) As mrfuzzy_made_it,
 MAX(cart_page) As cart_made_it,
 MAX(shipping_page) As shipping_made_it,
 MAX(billing_page) As billing_made_it,
 MAX(thankyou_page) As thankyou_made_it
 
FROM( Select 

    website_sessions.website_session_id,
    website_pageviews.pageview_url,
    website_pageviews.created_at AS pageviews_created_at
    CASE WHEN pageview_url = '/products' THEN 1 ELSE 0 END AS products_page,
    CASE WHEN pageview_url = '/the-original-mr-fuzzy' THEN 1 ELSE 0 END AS mrfuzzy_page,
    CASE WHEN pageview_url = '/cart' THEN 1 ELSE 0 END AS cart_page,
    CASE WHEN pageview_url = '/shipping' THEN 1 ELSE 0 END AS shipping_page,
    CASE WHEN pageview_url = '/billing' THEN 1 ELSE 0 END AS billing_page,
    CASE WHEN pageview_url = '/thank-you-for-your-order' THEN 1 ELSE 0 END AS thankyou_page,


FROM website_sessions
  LEFT JOIN website_pageviews
    ON website_sessions.website_session_id = website_pageviews.website_session_id
  
  WHERE website_sessions.utm_source = 'gsearch'
    AND website_sessions.utm_campaign = 'nonbrand' 
    AND website_sessions.created_at > '2012-08-05'
    AND website_sessions.created_at < '2012-09-05'
    
  ORDER BY
    website_sessions.website_session_id,
    website_pageviews.created_at
    ) AS pageview_level
    
    GROUP BY
    website_session_id;
    
 -- Now make a temp table for this
 
 
CREATE TEMPORARY TABLE session_level_made_it_flags

SELECT 
 website_session_id,
 MAX(products_page) As product_made_it,
 MAX(mrfuzzy_page) As mrfuzzy_made_it,
 MAX(cart_page) As cart_made_it,
 MAX(shipping_page) As shipping_made_it,
 MAX(billing_page) As billing_made_it,
 MAX(thankyou_page) As thankyou_made_it
 
 FROM( Select 

    website_sessions.website_session_id,
    website_pageviews.pageview_url,
    website_pageviews.created_at AS pageviews_created_at
    CASE WHEN pageview_url = '/products' THEN 1 ELSE 0 END AS products_page,
    CASE WHEN pageview_url = '/the-original-mr-fuzzy' THEN 1 ELSE 0 END AS mrfuzzy_page,
    CASE WHEN pageview_url = '/cart' THEN 1 ELSE 0 END AS cart_page,
    CASE WHEN pageview_url = '/shipping' THEN 1 ELSE 0 END AS shipping_page,
    CASE WHEN pageview_url = '/billing' THEN 1 ELSE 0 END AS billing_page,
    CASE WHEN pageview_url = '/thank-you-for-your-order' THEN 1 ELSE 0 END AS thankyou_page,


FROM website_sessions
  LEFT JOIN website_pageviews
    ON website_sessions.website_session_id = website_pageviews.website_session_id
  
  WHERE website_sessions.utm_source = 'gsearch'
    AND website_sessions.utm_campaign = 'nonbrand' 
    AND website_sessions.created_at > '2012-08-05'
    AND website_sessions.created_at < '2012-09-05'
    
  ORDER BY
    website_sessions.website_session_id,
    website_pageviews.created_at
    ) AS pageview_level
    
    GROUP BY
    website_session_id;

-- Produce the final output
SELECT 
  COUNT(DISTINCT website_session_id) AS sessions,
  COUNT(DISTINCT CASE WHEN product_made_it = 1 THEN website_session_id ELSE NULL END) AS to_products,
  COUNT(DISTINCT CASE WHEN mrfuzzy_made_it = 1 THEN website_session_id ELSE NULL END) AS to_mrfuzzy,
  COUNT(DISTINCT CASE WHEN cart_made_it = 1 THEN website_session_id ELSE NULL END) AS to_cart,
  COUNT(DISTINCT CASE WHEN shipping_made_it = 1 THEN website_session_id ELSE NULL END) AS to_shipping,
  COUNT(DISTINCT CASE WHEN billing_made_it = 1 THEN website_session_id ELSE NULL END) AS to_billing,
  COUNT(DISTINCT CASE WHEN thankyou_made_it = 1 THEN website_session_id ELSE NULL END) AS to_thankyou
 FROM session_level_made_it_flags;
  
  --Produce the click rates
  
SELECT 

  COUNT(DISTINCT CASE WHEN product_made_it = 1 THEN website_session_id ELSE NULL END)/ AS lander_click_rt,
  COUNT(DISTINCT CASE WHEN mrfuzzy_made_it = 1 THEN website_session_id ELSE NULL END)/ COUNT(DISTINCT CASE WHEN product_made_it = 1 THEN website_session_id ELSE NULL END) AS products_click_rt,
  COUNT(DISTINCT CASE WHEN cart_made_it = 1 THEN website_session_id ELSE NULL END)/ COUNT(DISTINCT CASE WHEN mrfuzzy_made_it = 1 THEN website_session_id ELSE NULL END) AS mrfuzzy_click_rt,
  COUNT(DISTINCT CASE WHEN shipping_made_it = 1 THEN website_session_id ELSE NULL END)/ COUNT(DISTINCT CASE WHEN cart_made_it = 1 THEN website_session_id ELSE NULL END) AS cart_click_rt,
  COUNT(DISTINCT CASE WHEN billing_made_it = 1 THEN website_session_id ELSE NULL END)/ COUNT(DISTINCT CASE WHEN shipping_made_it = 1 THEN website_session_id ELSE NULL END) AS shipping_click_rt,
  COUNT(DISTINCT CASE WHEN thankyou_made_it = 1 THEN website_session_id ELSE NULL END)/ COUNT(DISTINCT CASE WHEN billing_made_it = 1 THEN website_session_id ELSE NULL END) AS billing_click_rt
 FROM session_level_made_it_flags;
 
 
 
 
 
 
 --Task 6: they created an updated billing page. See if /billing-2 is doing better than orginial. Trying to find % of sessions on those pages end up placing an order. They ran the test for all traffic
 
 
 --Finds when first pageview occured for billing2
 SELECT 
 
  MIN(website_pageviews.website_pageview_id) AS first_pv_id
 
 FROM website_pageviews
 WHERE pageview_url = '/billing-2';
 
 
 SELECT 
  website_pageviews.website_session_id,
  website_pageviews.pageview_url AS billing_version_seen,
--  orders.order_id
 
 FROM website_pageviews
 -- LEFT JOIN orders
 --   ON orders.website_session_id = website_pageviews.website_session_id

WHERE  website_pageviews.website_pageview_id >= 53550 
  AND   website_pageviews.created_at < '2012-11-10'
  AND   website_pageviews.pageview_url IN ('/billing','/billing-2');
 
 -Subquery and summarize
 
 SELECT
  billing_version_seen,
  COUNT(DISTINCT website_session_id) AS sessions
  COUNT(DISTINCT order_id) AS orders,
  COUNT(DISTINCT order_id)/COUNT(DISTINCT website_session_id) AS billing_to_order_rt
  
  FROM(
   SELECT 
  website_pageviews.website_session_id,
  website_pageviews.pageview_url AS billing_version_seen,
--  orders.order_id
 
 FROM website_pageviews
 -- LEFT JOIN orders
 --   ON orders.website_session_id = website_pageviews.website_session_id

WHERE  website_pageviews.website_pageview_id >= 53550 
  AND   website_pageviews.created_at < '2012-11-10'
  AND   website_pageviews.pageview_url IN ('/billing','/billing-2');
  ) AS billing_sessions_w_orders
 
 GROUP BY
   billing_version_seen;
  
  
  
  
  
  
  
  
  
  
  --MID-COURSE PROJECT 
  --Extract and Analyze website traffic and perfomance data from db to qunaitify company growth and tell the story of how we have been able to generate growth
  
  -- Pull monthly trends for gsearch and orders so we can showcaw growth
  
  Select 
    YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT website_sessions.website)session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders
   FROM website_sessions
    LEFT JOIN orders
      ON orders.website_session_id = website_sessions.website_session_id
      
WHERE website_sessions.created_at < '2012-11-27'
  AND website_sessions.utm_source  'gsearch'
 GROUP BY 1,2;
 
  -- Separate Monthly trend of gsearch but splitting out nonbrand and brand campaigns
 

  Select 
    YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS nonbrand_sessions,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN orders.order_id ELSE NULL END) AS nonbrand_orders,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'brand' THEN website_sessions.website_session_id ELSE NULL END) AS brand_sessions,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'brand' THEN orders.order_id ELSE NULL END) AS brand_orders
   FROM website_sessions
    LEFT JOIN orders
      ON  orders.website_session_id = website_Sessions.website_session_id
  WHERE website_sessions.created_at < '2012-11-27'
      AND website_sessions.utm_source = 'gsearch'
  GROUP BY 1,2;
  
  --While on gsearch, dive into nonbrand and pull monthly sessions and order split by type
  
   Select 
    YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'desktop' THEN website_sessions.website_session_id ELSE NULL END) AS desktop_sessions,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'desktop' THEN orders.order_id ELSE NULL END) AS desktop_orders,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'mobile' THEN website_sessions.website_session_id ELSE NULL END) AS mobile_sessions,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'mobile' THEN orders.order_id ELSE NULL END) AS mobile_orders
    
   FROM website_sessions
    LEFT JOIN orders
      ON  orders.website_session_id = website_sessions.website_session_id
  WHERE website_sessions.created_at < '2012-11-27'
      AND website_sessions.utm_source = 'gsearch'
      AND website_sessions.utm_source = 'nonbrand'
  GROUP BY 1,2;
  
  -- Pull monthly trends for gsearch along with with trends for each of other channels
  
  SELECT DISTINCT
    utm_source,
    utm_campaign,
    http_referer
  FROM website_sessions
  Where website_sessions.created_at < '2012-11-27';
    
   Select 
    YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'gsearch' THEN website_sessions.website_session_id ELSE NULL END) AS gsearch_paid_sessions,
    COUNT(DISTINCT CASE WHEN utm_campaign = 'bsearch' THEN website_sessions.website_session_id ELSE NULL END) AS bsearch_paid_sessions,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NOT NULL THEN website_sessions.website_session_id ELSE NULL END) AS organic_search_sessions,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN website_sessions.website_session_id ELSE NULL END) AS direct_type_in_sessions
    
   FROM website_sessions
    LEFT JOIN orders
      ON orders.website_session_id = website_sessions.website_session_id
      
   WHERE website_sessions.created_at < '2012-11-27'
   GROUP BY 1,2;
   
   -- Could you pull session to order converison rates, by month
   
   Select 
    YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders,
    COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS conversation_rate
        
   FROM website_sessions
    LEFT JOIN orders
      ON orders.website_session_id = website_sessions.website_session_id
      
   WHERE website_sessions.created_at < '2012-11-27'
   GROUP BY 1,2;
   
   -- For gsearch lander test, please est. revenue that test earned us
   
   SELECT 
    MIN(website_pageview_id) AS first_test_pv
   FROM website_pageviews
   WHERE pageview_url = '/lander-1'
   
  CREATE TEMPORARY TABLE first_test_pageviews
  
   SELECT 
    website_pageviews.website_session_id,   
    MIN(website_pageview_id) AS min_pageview_id
   FROM website_pageviews
    INNER JOIN 
      ON website_sessions.website_session_id = website_pageviews.website_session_id
        AND website_sessions.created_at < '2012-07-28'
        AND website_sessions.created_at > '2012-06-19 00:35:54'
        AND website_sessions.utm_source = 'gsearch'
        AND website_sessions.utm_source = 'nonbrand'
        
     GROUP BY 
        website_pageviews.website_session_id;
        
        --Now, bring in next landing page to each session, but restrict to home or lander-1
        
        CREATE TEMPORARY TABLE nonbrand_test_sessions_w_landing_pages
        Select
         first_test_pageviews.website_session_id,
          website_pageviews.pageview_url AS landing_page
          
        FROM first_test_pageviews
         LEFT JOIN website_pageviews
           ON website_pageviews.website_pageview_id = first_test_pageviews.min_pageview_id
          
          WHERE website_pageviews.pageview_url IN ('/home', '/lander-1);
          
        -- make a table to bring in orders
        CREATE TEMPORARY TABLE nonbrand_test_sessions_w_landing_pages
        Select
         nonbrand_test_sessions_w_landing_pages.website_session_id,
         nonbrand_test_sessions_w_landing_pages.landing_page,
         orders.order_id AS order_id 
          
        FROM nonbrand_test_sessions_w_landing_pages
         LEFT JOIN orders
           ON orders.website_session_id = nonbrand_test_sessions_w_landing_pages.website_session_id;
           
         -- Find diff between conv rates
       SELECT
         landing_page
         COUNT(DISTINCT website_session_id) AS sessions,
         COUNT(DISTINCT order_id) AS orders,
         COUNT(DISTINCT order_id)/ COUNT(DISTINCT website_session_id) AS conv_rate
       FROM nonbrand_test_sessions_w_orders
       GROUP BY 1;
       
       
       --Find most recent pageview for gsearch nonbrand where traffic was sent to /home
  Select 
    MAX(website_sessions.website_session_id) AS most_recent_gsearch_nonbrand_home_pageview
 
FROM website_sessions
  LEFT JOIN website_pageviews
    ON website_sessions.website_session_id = website_pageviews.website_session_id
  
  WHERE website_sessions.utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand' 
    AND pageview_url = '/home'
    AND website_sessions.created_at < '2012-11-27'
       
       -- MAX = 17145
   Select 
   COUNT(website_session_id) AS sessions_since_test
 
FROM website_sessions
 
  WHERE website_sessions.created_at < '2012-11-27'
    AND utm_campaign = 'nonbrand' 
    AND website_session_id > 17145
    AND utm_source = 'gsearch'
    
    -- Show a full conv funnel from each of the two pages to order (from last problem)
       
 CREATE TEMPORARY TABLE session_level_made_it_flagged     
 SELECT 
 website_session_id,
 MAX(homepage) As saw_homepage,
 MAX(custom_lander) As saw_custom_lander,
 MAX(products_page) As product_made_it,
 MAX(mrfuzzy_page) As mrfuzzy_made_it,
 MAX(cart_page) As cart_made_it,
 MAX(shipping_page) As shipping_made_it,
 MAX(billing_page) As billing_made_it,
 MAX(thankyou_page) As thankyou_made_it
 
 FROM( Select 

    website_sessions.website_session_id,
    website_pageviews.pageview_url,
    --website_pageviews.created_at AS pageviews_created_at
    CASE WHEN pageview_url = '/home' THEN 1 ELSE 0 END AS homepage,
    CASE WHEN pageview_url = '/lander-1' THEN 1 ELSE 0 END AS custom_lander,
    CASE WHEN pageview_url = '/products' THEN 1 ELSE 0 END AS products_page,
    CASE WHEN pageview_url = '/the-original-mr-fuzzy' THEN 1 ELSE 0 END AS mrfuzzy_page,
    CASE WHEN pageview_url = '/cart' THEN 1 ELSE 0 END AS cart_page,
    CASE WHEN pageview_url = '/shipping' THEN 1 ELSE 0 END AS shipping_page,
    CASE WHEN pageview_url = '/billing' THEN 1 ELSE 0 END AS billing_page,
    CASE WHEN pageview_url = '/thank-you-for-your-order' THEN 1 ELSE 0 END AS thankyou_page,


FROM website_sessions
  LEFT JOIN website_pageviews
    ON website_sessions.website_session_id = website_pageviews.website_session_id
  
  WHERE website_sessions.utm_source = 'gsearch'
    AND website_sessions.utm_campaign = 'nonbrand' 
    AND website_sessions.created_at > '2012-06-19'
    AND website_sessions.created_at < '2012-07-28'
    
  ORDER BY
    website_sessions.website_session_id,
    website_pageviews.created_at
    ) AS pageview_level
    
    GROUP BY
    website_session_id;
        
         
   -NEW SECTION Channel Porfolio Optimization 
   
         
         
