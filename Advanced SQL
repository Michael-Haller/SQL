--Advance SQL

-- 1) adjusting max packet size to allow large files to run

SET GLOBAL max_allowed_packet = 1073741824;


-- 2) adjusting your SQL mode to allow invalid dates and use a smarter GROUP BY setting

SET GLOBAL SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES,ONLY_FULL_GROUP_BY';


-- 3) adjusting your timeout settings to run longer queries

SET GLOBAL connect_timeout=28800;

SET GLOBAL wait_timeout=28800;

SET GLOBAL interactive_timeout=28800;

-- The database doesn't load here because it's too massive for github

-- Task 1: Prodcue a breakdown by UTM Source, campaign, and referring domain


-For the Schema in the example

Use mavenfuzzyfactory;

Select 
  utm_source,
  utm_campaign,
  http_referer
  
COUNT(DISTINCT website_session_id) AS number_of_sessions
FROM website_sessions
WHERE created_at < '2012-04-14

GROUP BY
  utm_source,
  utm_campaign
  http_referer
  
ORDER BY number_of_sessions DESC;

--Task 2: Calculate the Conversion Rate from session to order
-- CVR must be at least 4%

Select 

COUNT(DISTINCT. website_sessions.website_session_id) AS sessions, 
COUNT(DISTINCT. orders.order_id) AS orders,
COUNT(DISTINCT. orders.order_id)/ COUNT(DISTINCT. website_sessions.website_session_id) AS sessions_to_order_conv_rt

From website_sessions
  LEFT JOIN orders
    ON orders.wes_session_id = website_sessions.website_session_id

Where website_sessions.creatred_at < '2012-04-14
  AND utm_source = 'gsearch'
  AND utm_campaign = 'nonbrand';
  
  
  --Task 3: We bid down gsearch nonbrand. Pull gsearch nonbrand trended session vlume, by week
  
  Select
  
  MIN(DATE(created_at)) AS week_start_at, 
  COUNT(DISTINCT website_session_id) AS sessions
  
  From website_sessions 
  
   WHERE created_at < '2012-04-15'
    AND utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand'
    
   GROUP BY   
   YEAR(created_at)
   WEEK(created_at);
   
   -- Task 4: pull conversion rates from session to order, by devide type
   
   Select
      website_sessions.device_type,
      COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
      COUNT(DISTINCT orders.order_id) AS orders,
      COUNT(DISTINCT orders.order_id)/ COUNT(DISTINCT website_sessions.website_session_id) AS conv_rt
      
     From website_sessions 
      LEFT JOIN orders
        ON orders.website_session_id = website_sessions.website_session_id
  
   WHERE website_sessions.created_at < '2012-05-12'
    AND utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand'
  
  GROUP BY 1;
  
  -- Task 5: Pull Weekly trends for both desktop and mobile
  
  Select 
  
  YEAR(created_at) AS yr,
  WEEK(created_at) AS wk,
  MIN(DATE(created_at)) AS week_start_date,
  COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN website_session_id ELSE NULL END) AS desktop_sessions,
  COUNT(DISTINCT CASE WHEN device_type = 'mobile' THEN website_session_id ELSE NULL END) AS mobile_sessions
  
  FROM website_sessions
    
  WHERE website_sessions.created_at < '2012-06-09'
      AND website_sessions.created_at > '2012-04-15'
      AND utm_source = 'gsearch'
      AND utm_campaign = 'nonbrand'
 
 GROUP BY
    YEAR(created_at),
    WEEK(created_at);
    
-- SECTION TWO
-- Creating Temporary tables - create a dataset which you can query off of
-- CREATE TEMPORARY TABLE newtemptablename

--Task 1: Pull the most-viewed website pages, ranked by session volume

Select 
  pageview_url,
  COUNT(DISTINCT website_pageview_id) AS pvs
 
FROM website_pageviews

WHERE created_at < '2012-06-09'

GROUP BY 
  pageview_url
ORDER BY
  pvs DESC;
  
  -- Task 2: Pull a list of top entry pages by pulling all entry pages and rank them on entry volume
  
  
  CREATE TEMPORARY TABLE first_pv_per_session
  Select
    website_session_id,
    MIN(website_pageview_id) AS first_pv
  
  FROM website_pageviews
  
  WHERE created_at < '2012-06-12'

  GROUP BY website_session_id;

Select 
  website_pageviews.pageview_url,
  COUNT(DISTINCT first_pv_per_session.website_session_id) as sessions_hitting_page
  
FROM first_pv_per_session
  LEFT JOIN website_pageviews
    ON first_pv_per_session.first_pv = website_pageviews.website_pageview_id
    
GROUP BY wesbite_pageviews.pageview_url

--Task 3: show three numbers, sessions, bounced sessions, and % of sessions which bounced

CRETE TEMPORARY TABLE first_pageviews
Select 
  website_session_id
  MIN(website_pageview_id) AS min_pageview_id

FROM website_pageviews

WHERE created_at < '2012-06-14'
GROUP BY
  website_session_id;
  
-- bring in landing page, but restirct to home only

  CREATE TEMPORARY TABLE sessions_w_home_landing_page
  Select
    first_pageviews.website_session_id,
    website_pageviews.pageview_url AS landing_page
  FROM first_pageviews
    LEFT JOIN website_pageviews
      ON website_pageviews.website_pageview_id = first_pageviews.min_pageview_id
 WHERE website_pageviews.pageview_url = '/home';
 
 -- Now table with count of pageviews per session
 
  CREATE TEMPORARY TABLE bounced_sessions
  
  SELECT
    sessions_w_home_landing_page.website_session_id,
    sessions_w_home_landing_page.landing_page,
    COUNT(website_pageviews.website_pageview_id) AS count_of_pages_viewed
    
    FROM sessions_w_home_landing_page
    LEFT JOIN website_pageviews
      ON website_pageviews.website_session_id = sessions_w_home_landing_page.website_session_id
      
      GROUP BY 
        sessions_w_home_landing_page.website_session_id,
        sessions_w_home_landing_page.landing_page
        
       HAVING
       COUNT(website_pageviews.website_pageview_id) = 1;
       
 -- Calculate Bounce Rates
 Select
  COUNT(DISTINCT sessions_w_home_landing_page.website_session_id) AS total_sessions,
  COUNT(DISTINCT bounced.website_session_id) AS bounced_sessions,
  COUNT(DISTINCT bounced.website_session_id)/ COUNT(DISTINCT sessions_w_home_landing_page.website_session_id) AS bounce_rate
  
 From sessions_w_home_landing_page
  LEFT JOIN bounced_sessions
    ON sessions_w_home_landing_page.website_session_id = bounced_sessions.website_sessions_id
    
    ORDER BY
    sessions_w_home_landing_page.website_session_id
    
--TASK 3: They created a new custom landing page (/lander-1) in a 50/50 test against the homepage (/home). Pull Bounce rates for the two groups. Just look at the period when lander-1 was getting traffic

  --Find first Website_pageview_id for relevant sessions
  Select 

  MIN(created_at) AS first_created_at,
  MIN(website_pageview_id) AS first_pageview_id

  FROM website_pageviews

  WHERE pageview_url ='/lander-1'
    AND created_at IS NOT NULL;
    
 -- identify landing page of each session
 
   CREATE TEMPORARY TABLE first_test_pageviews
     Select
      website_pageviews.website_session_id,
      MIN(website_pageviews.website_pageview_id) AS min_pageview_id
    
    FROM website_pageviews
      INNER JOIN wesbite_sessions
       ON wesbite_sessions.website_session_id = website_pageviews.website_session_id
       AND website_sessions.created _at < '2012-07-28'
       AND website_pageviews.website_pageview_id > 23504 -- What you find in part 1
       AND utm_source = 'gsearch'
       AND utm_campaign = 'nonbrand'
     
      GROUP BY
        website_pageviews.website_session_id;
      
     -- Bring in the landing page to each session, but restrict to home or lander-1
   
       CREATE TEMPORARY TABLE nonbrand_test_sessions_w_landing_page
        Select
         first_test_pageviews.website_session_id
          website_pageviews.pageview_url AS landing_page
        FROM first_test_pageviews
         LEFT JOIN website_pageviews
           ON website_pageviews.website_pageview_id = first_test_pageviews.min_pageview_id
          
          WHERE website_pageviews.pageview_url IN ('/home', '/lander-1);
         
   
   --now a table to count pageview per session and limit to bounced_session
  
     CREATE TEMPORARY TABLE nonbrand_test_bounced_sessions
        Select
          nonbrand_test_sessions_w_landing_page.website_session_id,
          nonbrand_test_sessions_w_landing_page.landing_page,
           COUNT(website_pageviews.website_pageview_id) AS count_of_pages_viewed
      
         FROM nonbrand_test_sessions_w_landing_page
           LEFT JOIN website_pageviews
                ON  website_pageviews.website_session_id = nonbrand_test_sessions_w_landing_page.website_session_id
        
           GROUP BY 
            nonbrand_test_sessions_w_landing_page.website_session_id,
            nonbrand_test_sessions_w_landing_page.landing_page
       
           HAVING
             COUNT(website_pageviews.website_pageview_id) = 1;
        
     -- Do the first to show and count after
     
        Select
         nonbrand_test_sessions_w_landing_page.landing_page,
       COUNT(DISTINCT nonbrand_test_sessions_w_landing_page.website_session_id) AS sessions,
       COUNT(DISTINCT nonbrand_test_bounced_sessions.website_session_id) AS bounced_sessions,   
       COUNT(DISTINCT nonbrand_test_bounced_sessions.website_session_id)/ COUNT(DISTINCT nonbrand_test_sessions_w_landing_page.website_session_id) AS bounce_rates
       
        FROM nonbrand_test_sessions_w_landing_page
           LEFT JOIN nonbrand_test_bounced_sessions
             ON  nonbrand_test_sessions_w_landing_page.website_session_id = nonbrand_test_bounced_sessions.website_session_id
          
       GROUP BY
         nonbrand_test_bounced_sessions.website_session_id;


--Task 4:
